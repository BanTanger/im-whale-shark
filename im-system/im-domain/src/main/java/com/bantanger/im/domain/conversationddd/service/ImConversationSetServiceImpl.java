// --- Auto Generated by BanTanger ---
// --- Welcome to im-whale-shark ! ---
//
package com.bantanger.im.domain.conversationddd.service;

import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.exception.BusinessException;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.im.domain.conversationddd.ImConversationSet;
import com.bantanger.im.domain.conversationddd.creator.ImConversationSetCreator;
import com.bantanger.im.domain.conversationddd.mapper.ImConversationSetMapper;
import com.bantanger.im.domain.conversationddd.query.ImConversationSetQuery;
import com.bantanger.im.domain.conversationddd.repository.ImConversationSetRepository;
import com.bantanger.im.domain.conversationddd.updater.ImConversationSetUpdater;
import com.bantanger.im.domain.conversationddd.vo.ImConversationSetVO;
import com.bantanger.jpa.support.EntityOperations;
import com.querydsl.core.BooleanBuilder;
import java.lang.Long;
import java.lang.Override;
import java.util.Optional;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class ImConversationSetServiceImpl implements ImConversationSetService {
   private final ImConversationSetRepository imConversationSetRepository;

   /**
    * createImpl
    */
   @Override
   public Long createImConversationSet(ImConversationSetCreator creator) {
      Optional<ImConversationSet> imConversationSet = EntityOperations.doCreate(imConversationSetRepository)
      .create(() -> ImConversationSetMapper.INSTANCE.dtoToEntity(creator))
      .update(e -> e.init())
      .execute();
      return imConversationSet.isPresent() ? imConversationSet.get().getId() : 0;
   }

   /**
    * update
    */
   @Override
   public void updateImConversationSet(ImConversationSetUpdater updater) {
      EntityOperations.doUpdate(imConversationSetRepository)
      .loadById(updater.getId())
      .update(e -> updater.updateImConversationSet(e))
      .execute();
   }

   /**
    * valid
    */
   @Override
   public void validImConversationSet(Long id) {
      EntityOperations.doUpdate(imConversationSetRepository)
      .loadById(id)
      .update(e -> e.valid())
      .execute();
   }

   /**
    * invalid
    */
   @Override
   public void invalidImConversationSet(Long id) {
      EntityOperations.doUpdate(imConversationSetRepository)
      .loadById(id)
      .update(e -> e.invalid())
      .execute();
   }

   /**
    * findById
    */
   @Override
   public ImConversationSetVO findById(Long id) {
      Optional<ImConversationSet> imConversationSet =  imConversationSetRepository.findById(id);
      return new ImConversationSetVO(imConversationSet.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
   }

   /**
    * findByPage
    */
   @Override
   public Page<ImConversationSetVO> findByPage(PageRequestWrapper<ImConversationSetQuery> query) {
      BooleanBuilder booleanBuilder = new BooleanBuilder();
      Page<ImConversationSet> page = imConversationSetRepository.findAll(booleanBuilder,
              PageRequest.of(query.getPage() - 1, query.getPageSize(),
              Sort.by(Sort.Direction.DESC, "createdAt")));
      return new PageImpl<>(page.getContent().stream().map(ImConversationSetVO::new)
              .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
   }
}

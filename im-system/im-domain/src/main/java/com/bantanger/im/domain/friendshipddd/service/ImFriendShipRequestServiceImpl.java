// --- Auto Generated by BanTanger ---
// --- Welcome to im-whale-shark ! ---
//
package com.bantanger.im.domain.friendshipddd.service;

import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.exception.BusinessException;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.im.domain.friendshipddd.ImFriendShipRequest;
import com.bantanger.im.domain.friendshipddd.creator.ImFriendShipRequestCreator;
import com.bantanger.im.domain.friendshipddd.mapper.ImFriendShipRequestMapper;
import com.bantanger.im.domain.friendshipddd.query.ImFriendShipRequestQuery;
import com.bantanger.im.domain.friendshipddd.repository.ImFriendShipRequestRepository;
import com.bantanger.im.domain.friendshipddd.updater.ImFriendShipRequestUpdater;
import com.bantanger.im.domain.friendshipddd.vo.ImFriendShipRequestVO;
import com.bantanger.jpa.support.EntityOperations;
import com.querydsl.core.BooleanBuilder;
import java.lang.Long;
import java.lang.Override;
import java.util.Optional;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class ImFriendShipRequestServiceImpl implements ImFriendShipRequestService {
   private final ImFriendShipRequestRepository imFriendShipRequestRepository;

   /**
    * createImpl
    */
   @Override
   public Long createImFriendShipRequest(ImFriendShipRequestCreator creator) {
      Optional<ImFriendShipRequest> imFriendShipRequest = EntityOperations.doCreate(imFriendShipRequestRepository)
      .create(() -> ImFriendShipRequestMapper.INSTANCE.dtoToEntity(creator))
      .update(e -> e.init())
      .execute();
      return imFriendShipRequest.isPresent() ? imFriendShipRequest.get().getId() : 0;
   }

   /**
    * update
    */
   @Override
   public void updateImFriendShipRequest(ImFriendShipRequestUpdater updater) {
      EntityOperations.doUpdate(imFriendShipRequestRepository)
      .loadById(updater.getId())
      .update(e -> updater.updateImFriendShipRequest(e))
      .execute();
   }

   /**
    * valid
    */
   @Override
   public void validImFriendShipRequest(Long id) {
      EntityOperations.doUpdate(imFriendShipRequestRepository)
      .loadById(id)
      .update(e -> e.valid())
      .execute();
   }

   /**
    * invalid
    */
   @Override
   public void invalidImFriendShipRequest(Long id) {
      EntityOperations.doUpdate(imFriendShipRequestRepository)
      .loadById(id)
      .update(e -> e.invalid())
      .execute();
   }

   /**
    * findById
    */
   @Override
   public ImFriendShipRequestVO findById(Long id) {
      Optional<ImFriendShipRequest> imFriendShipRequest =  imFriendShipRequestRepository.findById(id);
      return new ImFriendShipRequestVO(imFriendShipRequest.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
   }

   /**
    * findByPage
    */
   @Override
   public Page<ImFriendShipRequestVO> findByPage(
         PageRequestWrapper<ImFriendShipRequestQuery> query) {
      BooleanBuilder booleanBuilder = new BooleanBuilder();
      Page<ImFriendShipRequest> page = imFriendShipRequestRepository.findAll(booleanBuilder,
              PageRequest.of(query.getPage() - 1, query.getPageSize(),
              Sort.by(Sort.Direction.DESC, "createdAt")));
      return new PageImpl<>(page.getContent().stream().map(ImFriendShipRequestVO::new)
              .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
   }
}

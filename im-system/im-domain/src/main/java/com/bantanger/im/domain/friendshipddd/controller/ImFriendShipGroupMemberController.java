// --- Auto Generated by BanTanger ---
// --- Welcome to im-whale-shark ! ---
//
package com.bantanger.im.domain.friendshipddd.controller;

import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.model.JsonObject;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.common.model.PageResult;
import com.bantanger.im.domain.friendshipddd.creator.ImFriendShipGroupMemberCreator;
import com.bantanger.im.domain.friendshipddd.mapper.ImFriendShipGroupMemberMapper;
import com.bantanger.im.domain.friendshipddd.query.ImFriendShipGroupMemberQuery;
import com.bantanger.im.domain.friendshipddd.request.ImFriendShipGroupMemberCreateRequest;
import com.bantanger.im.domain.friendshipddd.request.ImFriendShipGroupMemberQueryRequest;
import com.bantanger.im.domain.friendshipddd.request.ImFriendShipGroupMemberUpdateRequest;
import com.bantanger.im.domain.friendshipddd.response.ImFriendShipGroupMemberResponse;
import com.bantanger.im.domain.friendshipddd.service.ImFriendShipGroupMemberService;
import com.bantanger.im.domain.friendshipddd.updater.ImFriendShipGroupMemberUpdater;
import com.bantanger.im.domain.friendshipddd.vo.ImFriendShipGroupMemberVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("imFriendShipGroupMember/v1/")
@RequiredArgsConstructor
public class ImFriendShipGroupMemberController {
   private final ImFriendShipGroupMemberService imFriendShipGroupMemberService;

   /**
    * createRequest
    */
   @PostMapping("createImFriendShipGroupMember")
   public JsonObject<Long> createImFriendShipGroupMember(
         @RequestBody ImFriendShipGroupMemberCreateRequest request) {
      ImFriendShipGroupMemberCreator creator = ImFriendShipGroupMemberMapper.INSTANCE.request2Dto(request);
      return JsonObject.success(imFriendShipGroupMemberService.createImFriendShipGroupMember(creator));
   }

   /**
    * update request
    */
   @PostMapping("updateImFriendShipGroupMember")
   public JsonObject<String> updateImFriendShipGroupMember(
         @RequestBody ImFriendShipGroupMemberUpdateRequest request) {
      ImFriendShipGroupMemberUpdater updater = ImFriendShipGroupMemberMapper.INSTANCE.request2Updater(request);
      imFriendShipGroupMemberService.updateImFriendShipGroupMember(updater);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * valid
    */
   @PostMapping("valid/{id}")
   public JsonObject<String> validImFriendShipGroupMember(@PathVariable Long id) {
      imFriendShipGroupMemberService.validImFriendShipGroupMember(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * invalid
    */
   @PostMapping("invalid/{id}")
   public JsonObject<String> invalidImFriendShipGroupMember(@PathVariable Long id) {
      imFriendShipGroupMemberService.invalidImFriendShipGroupMember(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * findById
    */
   @GetMapping("findById/{id}")
   public JsonObject<ImFriendShipGroupMemberResponse> findById(@PathVariable Long id) {
      ImFriendShipGroupMemberVO vo = imFriendShipGroupMemberService.findById(id);
      ImFriendShipGroupMemberResponse response = ImFriendShipGroupMemberMapper.INSTANCE.vo2CustomResponse(vo);
      return JsonObject.success(response);
   }

   /**
    * findByPage request
    */
   @PostMapping("findByPage")
   public JsonObject<PageResult<ImFriendShipGroupMemberResponse>> findByPage(
         @RequestBody PageRequestWrapper<ImFriendShipGroupMemberQueryRequest> request) {
      PageRequestWrapper<ImFriendShipGroupMemberQuery> wrapper = new PageRequestWrapper<>();
      wrapper.setBean(ImFriendShipGroupMemberMapper.INSTANCE.request2Query(request.getBean()));
      wrapper.setSorts(request.getSorts());
          wrapper.setPageSize(request.getPageSize());
          wrapper.setPage(request.getPage());
      Page<ImFriendShipGroupMemberVO> page = imFriendShipGroupMemberService.findByPage(wrapper);
      return JsonObject.success(
              PageResult.of(
                  page.getContent().stream()
                      .map(vo -> ImFriendShipGroupMemberMapper.INSTANCE.vo2CustomResponse(vo))
                      .collect(Collectors.toList()),
                  page.getTotalElements(),
                  page.getSize(),
                  page.getNumber())
          );
   }
}

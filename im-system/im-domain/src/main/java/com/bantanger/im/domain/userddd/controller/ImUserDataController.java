// --- Auto Generated by BanTanger ---
// --- Welcome to im-whale-shark ! ---
//
package com.bantanger.im.domain.userddd.controller;

import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.model.JsonObject;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.common.model.PageResult;
import com.bantanger.im.domain.userddd.creator.ImUserDataCreator;
import com.bantanger.im.domain.userddd.mapper.ImUserDataMapper;
import com.bantanger.im.domain.userddd.query.ImUserDataQuery;
import com.bantanger.im.domain.userddd.request.ImUserDataCreateRequest;
import com.bantanger.im.domain.userddd.request.ImUserDataQueryRequest;
import com.bantanger.im.domain.userddd.request.ImUserDataUpdateRequest;
import com.bantanger.im.domain.userddd.response.ImUserDataResponse;
import com.bantanger.im.domain.userddd.service.ImUserDataService;
import com.bantanger.im.domain.userddd.updater.ImUserDataUpdater;
import com.bantanger.im.domain.userddd.vo.ImUserDataVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("imUserData/v1/")
@RequiredArgsConstructor
public class ImUserDataController {
   private final ImUserDataService imUserDataService;

   /**
    * createRequest
    */
   @PostMapping("createImUserData")
   public JsonObject<Long> createImUserData(@RequestBody ImUserDataCreateRequest request) {
      ImUserDataCreator creator = ImUserDataMapper.INSTANCE.request2Dto(request);
      return JsonObject.success(imUserDataService.createImUserData(creator));
   }

   /**
    * update request
    */
   @PostMapping("updateImUserData")
   public JsonObject<String> updateImUserData(@RequestBody ImUserDataUpdateRequest request) {
      ImUserDataUpdater updater = ImUserDataMapper.INSTANCE.request2Updater(request);
      imUserDataService.updateImUserData(updater);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * valid
    */
   @PostMapping("valid/{id}")
   public JsonObject<String> validImUserData(@PathVariable Long id) {
      imUserDataService.validImUserData(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * invalid
    */
   @PostMapping("invalid/{id}")
   public JsonObject<String> invalidImUserData(@PathVariable Long id) {
      imUserDataService.invalidImUserData(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * findById
    */
   @GetMapping("findById/{id}")
   public JsonObject<ImUserDataResponse> findById(@PathVariable Long id) {
      ImUserDataVO vo = imUserDataService.findById(id);
      ImUserDataResponse response = ImUserDataMapper.INSTANCE.vo2CustomResponse(vo);
      return JsonObject.success(response);
   }

   /**
    * findByPage request
    */
   @PostMapping("findByPage")
   public JsonObject<PageResult<ImUserDataResponse>> findByPage(
         @RequestBody PageRequestWrapper<ImUserDataQueryRequest> request) {
      PageRequestWrapper<ImUserDataQuery> wrapper = new PageRequestWrapper<>();
      wrapper.setBean(ImUserDataMapper.INSTANCE.request2Query(request.getBean()));
      wrapper.setSorts(request.getSorts());
          wrapper.setPageSize(request.getPageSize());
          wrapper.setPage(request.getPage());
      Page<ImUserDataVO> page = imUserDataService.findByPage(wrapper);
      return JsonObject.success(
              PageResult.of(
                  page.getContent().stream()
                      .map(vo -> ImUserDataMapper.INSTANCE.vo2CustomResponse(vo))
                      .collect(Collectors.toList()),
                  page.getTotalElements(),
                  page.getSize(),
                  page.getNumber())
          );
   }
}

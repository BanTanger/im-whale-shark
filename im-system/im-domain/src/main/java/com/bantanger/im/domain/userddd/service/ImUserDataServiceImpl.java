// --- Auto Generated by BanTanger ---
// --- Welcome to im-whale-shark ! ---
//
package com.bantanger.im.domain.userddd.service;

import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.exception.BusinessException;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.im.domain.userddd.ImUserData;
import com.bantanger.im.domain.userddd.creator.ImUserDataCreator;
import com.bantanger.im.domain.userddd.mapper.ImUserDataMapper;
import com.bantanger.im.domain.userddd.query.ImUserDataQuery;
import com.bantanger.im.domain.userddd.repository.ImUserDataRepository;
import com.bantanger.im.domain.userddd.updater.ImUserDataUpdater;
import com.bantanger.im.domain.userddd.vo.ImUserDataVO;
import com.bantanger.jpa.support.EntityOperations;
import com.querydsl.core.BooleanBuilder;
import java.lang.Long;
import java.lang.Override;
import java.util.Optional;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class ImUserDataServiceImpl implements ImUserDataService {
   private final ImUserDataRepository imUserDataRepository;

   /**
    * createImpl
    */
   @Override
   public Long createImUserData(ImUserDataCreator creator) {
      Optional<ImUserData> imUserData = EntityOperations.doCreate(imUserDataRepository)
      .create(() -> ImUserDataMapper.INSTANCE.dtoToEntity(creator))
      .update(e -> e.init())
      .execute();
      return imUserData.isPresent() ? imUserData.get().getId() : 0;
   }

   /**
    * update
    */
   @Override
   public void updateImUserData(ImUserDataUpdater updater) {
      EntityOperations.doUpdate(imUserDataRepository)
      .loadById(updater.getId())
      .update(e -> updater.updateImUserData(e))
      .execute();
   }

   /**
    * valid
    */
   @Override
   public void validImUserData(Long id) {
      EntityOperations.doUpdate(imUserDataRepository)
      .loadById(id)
      .update(e -> e.valid())
      .execute();
   }

   /**
    * invalid
    */
   @Override
   public void invalidImUserData(Long id) {
      EntityOperations.doUpdate(imUserDataRepository)
      .loadById(id)
      .update(e -> e.invalid())
      .execute();
   }

   /**
    * findById
    */
   @Override
   public ImUserDataVO findById(Long id) {
      Optional<ImUserData> imUserData =  imUserDataRepository.findById(id);
      return new ImUserDataVO(imUserData.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
   }

   /**
    * findByPage
    */
   @Override
   public Page<ImUserDataVO> findByPage(PageRequestWrapper<ImUserDataQuery> query) {
      BooleanBuilder booleanBuilder = new BooleanBuilder();
      Page<ImUserData> page = imUserDataRepository.findAll(booleanBuilder,
              PageRequest.of(query.getPage() - 1, query.getPageSize(),
              Sort.by(Sort.Direction.DESC, "createdAt")));
      return new PageImpl<>(page.getContent().stream().map(ImUserDataVO::new)
              .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
   }
}

// --- Auto Generated by BanTanger ---
// --- Welcome to im-whale-shark ! ---
//
package com.bantanger.im.domain.friendshipddd.controller;

import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.model.JsonObject;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.common.model.PageResult;
import com.bantanger.im.domain.friendshipddd.creator.ImFriendShipCreator;
import com.bantanger.im.domain.friendshipddd.mapper.ImFriendShipMapper;
import com.bantanger.im.domain.friendshipddd.query.ImFriendShipQuery;
import com.bantanger.im.domain.friendshipddd.request.ImFriendShipCreateRequest;
import com.bantanger.im.domain.friendshipddd.request.ImFriendShipQueryRequest;
import com.bantanger.im.domain.friendshipddd.request.ImFriendShipUpdateRequest;
import com.bantanger.im.domain.friendshipddd.response.ImFriendShipResponse;
import com.bantanger.im.domain.friendshipddd.service.ImFriendShipService;
import com.bantanger.im.domain.friendshipddd.updater.ImFriendShipUpdater;
import com.bantanger.im.domain.friendshipddd.vo.ImFriendShipVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("imFriendShip/v1/")
@RequiredArgsConstructor
public class ImFriendShipController {
   private final ImFriendShipService imFriendShipService;

   /**
    * createRequest
    */
   @PostMapping("createImFriendShip")
   public JsonObject<Long> createImFriendShip(@RequestBody ImFriendShipCreateRequest request) {
      ImFriendShipCreator creator = ImFriendShipMapper.INSTANCE.request2Dto(request);
      return JsonObject.success(imFriendShipService.createImFriendShip(creator));
   }

   /**
    * update request
    */
   @PostMapping("updateImFriendShip")
   public JsonObject<String> updateImFriendShip(@RequestBody ImFriendShipUpdateRequest request) {
      ImFriendShipUpdater updater = ImFriendShipMapper.INSTANCE.request2Updater(request);
      imFriendShipService.updateImFriendShip(updater);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * valid
    */
   @PostMapping("valid/{id}")
   public JsonObject<String> validImFriendShip(@PathVariable Long id) {
      imFriendShipService.validImFriendShip(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * invalid
    */
   @PostMapping("invalid/{id}")
   public JsonObject<String> invalidImFriendShip(@PathVariable Long id) {
      imFriendShipService.invalidImFriendShip(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * findById
    */
   @GetMapping("findById/{id}")
   public JsonObject<ImFriendShipResponse> findById(@PathVariable Long id) {
      ImFriendShipVO vo = imFriendShipService.findById(id);
      ImFriendShipResponse response = ImFriendShipMapper.INSTANCE.vo2CustomResponse(vo);
      return JsonObject.success(response);
   }

   /**
    * findByPage request
    */
   @PostMapping("findByPage")
   public JsonObject<PageResult<ImFriendShipResponse>> findByPage(
         @RequestBody PageRequestWrapper<ImFriendShipQueryRequest> request) {
      PageRequestWrapper<ImFriendShipQuery> wrapper = new PageRequestWrapper<>();
      wrapper.setBean(ImFriendShipMapper.INSTANCE.request2Query(request.getBean()));
      wrapper.setSorts(request.getSorts());
          wrapper.setPageSize(request.getPageSize());
          wrapper.setPage(request.getPage());
      Page<ImFriendShipVO> page = imFriendShipService.findByPage(wrapper);
      return JsonObject.success(
              PageResult.of(
                  page.getContent().stream()
                      .map(vo -> ImFriendShipMapper.INSTANCE.vo2CustomResponse(vo))
                      .collect(Collectors.toList()),
                  page.getTotalElements(),
                  page.getSize(),
                  page.getNumber())
          );
   }
}

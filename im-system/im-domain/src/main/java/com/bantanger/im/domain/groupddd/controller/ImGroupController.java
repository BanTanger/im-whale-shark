// --- Auto Generated by BanTanger ---
// --- Welcome to im-whale-shark ! ---
//
package com.bantanger.im.domain.groupddd.controller;

import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.model.JsonObject;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.common.model.PageResult;
import com.bantanger.im.domain.groupddd.creator.ImGroupCreator;
import com.bantanger.im.domain.groupddd.mapper.ImGroupMapper;
import com.bantanger.im.domain.groupddd.query.ImGroupQuery;
import com.bantanger.im.domain.groupddd.request.ImGroupCreateRequest;
import com.bantanger.im.domain.groupddd.request.ImGroupQueryRequest;
import com.bantanger.im.domain.groupddd.request.ImGroupUpdateRequest;
import com.bantanger.im.domain.groupddd.response.ImGroupResponse;
import com.bantanger.im.domain.groupddd.service.ImGroupService;
import com.bantanger.im.domain.groupddd.updater.ImGroupUpdater;
import com.bantanger.im.domain.groupddd.vo.ImGroupVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("imGroup/v1/")
@RequiredArgsConstructor
public class ImGroupController {
   private final ImGroupService imGroupService;

   /**
    * createRequest
    */
   @PostMapping("createImGroup")
   public JsonObject<Long> createImGroup(@RequestBody ImGroupCreateRequest request) {
      ImGroupCreator creator = ImGroupMapper.INSTANCE.request2Dto(request);
      return JsonObject.success(imGroupService.createImGroup(creator));
   }

   /**
    * update request
    */
   @PostMapping("updateImGroup")
   public JsonObject<String> updateImGroup(@RequestBody ImGroupUpdateRequest request) {
      ImGroupUpdater updater = ImGroupMapper.INSTANCE.request2Updater(request);
      imGroupService.updateImGroup(updater);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * valid
    */
   @PostMapping("valid/{id}")
   public JsonObject<String> validImGroup(@PathVariable Long id) {
      imGroupService.validImGroup(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * invalid
    */
   @PostMapping("invalid/{id}")
   public JsonObject<String> invalidImGroup(@PathVariable Long id) {
      imGroupService.invalidImGroup(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * findById
    */
   @GetMapping("findById/{id}")
   public JsonObject<ImGroupResponse> findById(@PathVariable Long id) {
      ImGroupVO vo = imGroupService.findById(id);
      ImGroupResponse response = ImGroupMapper.INSTANCE.vo2CustomResponse(vo);
      return JsonObject.success(response);
   }

   /**
    * findByPage request
    */
   @PostMapping("findByPage")
   public JsonObject<PageResult<ImGroupResponse>> findByPage(
         @RequestBody PageRequestWrapper<ImGroupQueryRequest> request) {
      PageRequestWrapper<ImGroupQuery> wrapper = new PageRequestWrapper<>();
      wrapper.setBean(ImGroupMapper.INSTANCE.request2Query(request.getBean()));
      wrapper.setSorts(request.getSorts());
          wrapper.setPageSize(request.getPageSize());
          wrapper.setPage(request.getPage());
      Page<ImGroupVO> page = imGroupService.findByPage(wrapper);
      return JsonObject.success(
              PageResult.of(
                  page.getContent().stream()
                      .map(vo -> ImGroupMapper.INSTANCE.vo2CustomResponse(vo))
                      .collect(Collectors.toList()),
                  page.getTotalElements(),
                  page.getSize(),
                  page.getNumber())
          );
   }
}

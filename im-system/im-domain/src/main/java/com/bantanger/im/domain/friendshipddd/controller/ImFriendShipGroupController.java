// --- Auto Generated by BanTanger ---
// --- Welcome to im-whale-shark ! ---
//
package com.bantanger.im.domain.friendshipddd.controller;

import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.model.JsonObject;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.common.model.PageResult;
import com.bantanger.im.domain.friendshipddd.creator.ImFriendShipGroupCreator;
import com.bantanger.im.domain.friendshipddd.mapper.ImFriendShipGroupMapper;
import com.bantanger.im.domain.friendshipddd.query.ImFriendShipGroupQuery;
import com.bantanger.im.domain.friendshipddd.request.ImFriendShipGroupCreateRequest;
import com.bantanger.im.domain.friendshipddd.request.ImFriendShipGroupQueryRequest;
import com.bantanger.im.domain.friendshipddd.request.ImFriendShipGroupUpdateRequest;
import com.bantanger.im.domain.friendshipddd.response.ImFriendShipGroupResponse;
import com.bantanger.im.domain.friendshipddd.service.ImFriendShipGroupService;
import com.bantanger.im.domain.friendshipddd.updater.ImFriendShipGroupUpdater;
import com.bantanger.im.domain.friendshipddd.vo.ImFriendShipGroupVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("imFriendShipGroup/v1/")
@RequiredArgsConstructor
public class ImFriendShipGroupController {
   private final ImFriendShipGroupService imFriendShipGroupService;

   /**
    * createRequest
    */
   @PostMapping("createImFriendShipGroup")
   public JsonObject<Long> createImFriendShipGroup(
         @RequestBody ImFriendShipGroupCreateRequest request) {
      ImFriendShipGroupCreator creator = ImFriendShipGroupMapper.INSTANCE.request2Dto(request);
      return JsonObject.success(imFriendShipGroupService.createImFriendShipGroup(creator));
   }

   /**
    * update request
    */
   @PostMapping("updateImFriendShipGroup")
   public JsonObject<String> updateImFriendShipGroup(
         @RequestBody ImFriendShipGroupUpdateRequest request) {
      ImFriendShipGroupUpdater updater = ImFriendShipGroupMapper.INSTANCE.request2Updater(request);
      imFriendShipGroupService.updateImFriendShipGroup(updater);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * valid
    */
   @PostMapping("valid/{id}")
   public JsonObject<String> validImFriendShipGroup(@PathVariable Long id) {
      imFriendShipGroupService.validImFriendShipGroup(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * invalid
    */
   @PostMapping("invalid/{id}")
   public JsonObject<String> invalidImFriendShipGroup(@PathVariable Long id) {
      imFriendShipGroupService.invalidImFriendShipGroup(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * findById
    */
   @GetMapping("findById/{id}")
   public JsonObject<ImFriendShipGroupResponse> findById(@PathVariable Long id) {
      ImFriendShipGroupVO vo = imFriendShipGroupService.findById(id);
      ImFriendShipGroupResponse response = ImFriendShipGroupMapper.INSTANCE.vo2CustomResponse(vo);
      return JsonObject.success(response);
   }

   /**
    * findByPage request
    */
   @PostMapping("findByPage")
   public JsonObject<PageResult<ImFriendShipGroupResponse>> findByPage(
         @RequestBody PageRequestWrapper<ImFriendShipGroupQueryRequest> request) {
      PageRequestWrapper<ImFriendShipGroupQuery> wrapper = new PageRequestWrapper<>();
      wrapper.setBean(ImFriendShipGroupMapper.INSTANCE.request2Query(request.getBean()));
      wrapper.setSorts(request.getSorts());
          wrapper.setPageSize(request.getPageSize());
          wrapper.setPage(request.getPage());
      Page<ImFriendShipGroupVO> page = imFriendShipGroupService.findByPage(wrapper);
      return JsonObject.success(
              PageResult.of(
                  page.getContent().stream()
                      .map(vo -> ImFriendShipGroupMapper.INSTANCE.vo2CustomResponse(vo))
                      .collect(Collectors.toList()),
                  page.getTotalElements(),
                  page.getSize(),
                  page.getNumber())
          );
   }
}

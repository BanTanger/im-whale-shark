// --- Auto Generated by BanTanger ---
// --- Welcome to im-whale-shark ! ---
//
package com.bantanger.im.domain.groupddd.controller;

import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.model.JsonObject;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.common.model.PageResult;
import com.bantanger.im.domain.groupddd.creator.ImGroupMemberCreator;
import com.bantanger.im.domain.groupddd.mapper.ImGroupMemberMapper;
import com.bantanger.im.domain.groupddd.query.ImGroupMemberQuery;
import com.bantanger.im.domain.groupddd.request.ImGroupMemberCreateRequest;
import com.bantanger.im.domain.groupddd.request.ImGroupMemberQueryRequest;
import com.bantanger.im.domain.groupddd.request.ImGroupMemberUpdateRequest;
import com.bantanger.im.domain.groupddd.response.ImGroupMemberResponse;
import com.bantanger.im.domain.groupddd.service.ImGroupMemberService;
import com.bantanger.im.domain.groupddd.updater.ImGroupMemberUpdater;
import com.bantanger.im.domain.groupddd.vo.ImGroupMemberVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("imGroupMember/v1/")
@RequiredArgsConstructor
public class ImGroupMemberController {
   private final ImGroupMemberService imGroupMemberService;

   /**
    * createRequest
    */
   @PostMapping("createImGroupMember")
   public JsonObject<Long> createImGroupMember(@RequestBody ImGroupMemberCreateRequest request) {
      ImGroupMemberCreator creator = ImGroupMemberMapper.INSTANCE.request2Dto(request);
      return JsonObject.success(imGroupMemberService.createImGroupMember(creator));
   }

   /**
    * update request
    */
   @PostMapping("updateImGroupMember")
   public JsonObject<String> updateImGroupMember(@RequestBody ImGroupMemberUpdateRequest request) {
      ImGroupMemberUpdater updater = ImGroupMemberMapper.INSTANCE.request2Updater(request);
      imGroupMemberService.updateImGroupMember(updater);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * valid
    */
   @PostMapping("valid/{id}")
   public JsonObject<String> validImGroupMember(@PathVariable Long id) {
      imGroupMemberService.validImGroupMember(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * invalid
    */
   @PostMapping("invalid/{id}")
   public JsonObject<String> invalidImGroupMember(@PathVariable Long id) {
      imGroupMemberService.invalidImGroupMember(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * findById
    */
   @GetMapping("findById/{id}")
   public JsonObject<ImGroupMemberResponse> findById(@PathVariable Long id) {
      ImGroupMemberVO vo = imGroupMemberService.findById(id);
      ImGroupMemberResponse response = ImGroupMemberMapper.INSTANCE.vo2CustomResponse(vo);
      return JsonObject.success(response);
   }

   /**
    * findByPage request
    */
   @PostMapping("findByPage")
   public JsonObject<PageResult<ImGroupMemberResponse>> findByPage(
         @RequestBody PageRequestWrapper<ImGroupMemberQueryRequest> request) {
      PageRequestWrapper<ImGroupMemberQuery> wrapper = new PageRequestWrapper<>();
      wrapper.setBean(ImGroupMemberMapper.INSTANCE.request2Query(request.getBean()));
      wrapper.setSorts(request.getSorts());
          wrapper.setPageSize(request.getPageSize());
          wrapper.setPage(request.getPage());
      Page<ImGroupMemberVO> page = imGroupMemberService.findByPage(wrapper);
      return JsonObject.success(
              PageResult.of(
                  page.getContent().stream()
                      .map(vo -> ImGroupMemberMapper.INSTANCE.vo2CustomResponse(vo))
                      .collect(Collectors.toList()),
                  page.getTotalElements(),
                  page.getSize(),
                  page.getNumber())
          );
   }
}

// --- Auto Generated by BanTanger ---
// --- Welcome to im-whale-shark ! ---
//
package com.bantanger.im.domain.conversationddd.controller;

import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.model.JsonObject;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.common.model.PageResult;
import com.bantanger.im.domain.conversationddd.creator.ImConversationSetCreator;
import com.bantanger.im.domain.conversationddd.mapper.ImConversationSetMapper;
import com.bantanger.im.domain.conversationddd.query.ImConversationSetQuery;
import com.bantanger.im.domain.conversationddd.request.ImConversationSetCreateRequest;
import com.bantanger.im.domain.conversationddd.request.ImConversationSetQueryRequest;
import com.bantanger.im.domain.conversationddd.request.ImConversationSetUpdateRequest;
import com.bantanger.im.domain.conversationddd.response.ImConversationSetResponse;
import com.bantanger.im.domain.conversationddd.service.ImConversationSetService;
import com.bantanger.im.domain.conversationddd.updater.ImConversationSetUpdater;
import com.bantanger.im.domain.conversationddd.vo.ImConversationSetVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("imConversationSet/v1/")
@RequiredArgsConstructor
public class ImConversationSetController {
   private final ImConversationSetService imConversationSetService;

   /**
    * createRequest
    */
   @PostMapping("createImConversationSet")
   public JsonObject<Long> createImConversationSet(
         @RequestBody ImConversationSetCreateRequest request) {
      ImConversationSetCreator creator = ImConversationSetMapper.INSTANCE.request2Dto(request);
      return JsonObject.success(imConversationSetService.createImConversationSet(creator));
   }

   /**
    * update request
    */
   @PostMapping("updateImConversationSet")
   public JsonObject<String> updateImConversationSet(
         @RequestBody ImConversationSetUpdateRequest request) {
      ImConversationSetUpdater updater = ImConversationSetMapper.INSTANCE.request2Updater(request);
      imConversationSetService.updateImConversationSet(updater);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * valid
    */
   @PostMapping("valid/{id}")
   public JsonObject<String> validImConversationSet(@PathVariable Long id) {
      imConversationSetService.validImConversationSet(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * invalid
    */
   @PostMapping("invalid/{id}")
   public JsonObject<String> invalidImConversationSet(@PathVariable Long id) {
      imConversationSetService.invalidImConversationSet(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * findById
    */
   @GetMapping("findById/{id}")
   public JsonObject<ImConversationSetResponse> findById(@PathVariable Long id) {
      ImConversationSetVO vo = imConversationSetService.findById(id);
      ImConversationSetResponse response = ImConversationSetMapper.INSTANCE.vo2CustomResponse(vo);
      return JsonObject.success(response);
   }

   /**
    * findByPage request
    */
   @PostMapping("findByPage")
   public JsonObject<PageResult<ImConversationSetResponse>> findByPage(
         @RequestBody PageRequestWrapper<ImConversationSetQueryRequest> request) {
      PageRequestWrapper<ImConversationSetQuery> wrapper = new PageRequestWrapper<>();
      wrapper.setBean(ImConversationSetMapper.INSTANCE.request2Query(request.getBean()));
      wrapper.setSorts(request.getSorts());
          wrapper.setPageSize(request.getPageSize());
          wrapper.setPage(request.getPage());
      Page<ImConversationSetVO> page = imConversationSetService.findByPage(wrapper);
      return JsonObject.success(
              PageResult.of(
                  page.getContent().stream()
                      .map(vo -> ImConversationSetMapper.INSTANCE.vo2CustomResponse(vo))
                      .collect(Collectors.toList()),
                  page.getTotalElements(),
                  page.getSize(),
                  page.getNumber())
          );
   }
}

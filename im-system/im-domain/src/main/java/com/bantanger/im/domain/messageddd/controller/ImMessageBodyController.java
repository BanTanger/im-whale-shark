// --- Auto Generated by BanTanger ---
// --- Welcome to im-whale-shark ! ---
//
package com.bantanger.im.domain.messageddd.controller;

import com.bantanger.common.enums.CodeEnum;
import com.bantanger.common.model.JsonObject;
import com.bantanger.common.model.PageRequestWrapper;
import com.bantanger.common.model.PageResult;
import com.bantanger.im.domain.messageddd.creator.ImMessageBodyCreator;
import com.bantanger.im.domain.messageddd.mapper.ImMessageBodyMapper;
import com.bantanger.im.domain.messageddd.query.ImMessageBodyQuery;
import com.bantanger.im.domain.messageddd.request.ImMessageBodyCreateRequest;
import com.bantanger.im.domain.messageddd.request.ImMessageBodyQueryRequest;
import com.bantanger.im.domain.messageddd.request.ImMessageBodyUpdateRequest;
import com.bantanger.im.domain.messageddd.response.ImMessageBodyResponse;
import com.bantanger.im.domain.messageddd.service.ImMessageBodyService;
import com.bantanger.im.domain.messageddd.updater.ImMessageBodyUpdater;
import com.bantanger.im.domain.messageddd.vo.ImMessageBodyVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("imMessageBody/v1/")
@RequiredArgsConstructor
public class ImMessageBodyController {
   private final ImMessageBodyService imMessageBodyService;

   /**
    * createRequest
    */
   @PostMapping("createImMessageBody")
   public JsonObject<Long> createImMessageBody(@RequestBody ImMessageBodyCreateRequest request) {
      ImMessageBodyCreator creator = ImMessageBodyMapper.INSTANCE.request2Dto(request);
      return JsonObject.success(imMessageBodyService.createImMessageBody(creator));
   }

   /**
    * update request
    */
   @PostMapping("updateImMessageBody")
   public JsonObject<String> updateImMessageBody(@RequestBody ImMessageBodyUpdateRequest request) {
      ImMessageBodyUpdater updater = ImMessageBodyMapper.INSTANCE.request2Updater(request);
      imMessageBodyService.updateImMessageBody(updater);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * valid
    */
   @PostMapping("valid/{id}")
   public JsonObject<String> validImMessageBody(@PathVariable Long id) {
      imMessageBodyService.validImMessageBody(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * invalid
    */
   @PostMapping("invalid/{id}")
   public JsonObject<String> invalidImMessageBody(@PathVariable Long id) {
      imMessageBodyService.invalidImMessageBody(id);
      return JsonObject.success(CodeEnum.Success.getName());
   }

   /**
    * findById
    */
   @GetMapping("findById/{id}")
   public JsonObject<ImMessageBodyResponse> findById(@PathVariable Long id) {
      ImMessageBodyVO vo = imMessageBodyService.findById(id);
      ImMessageBodyResponse response = ImMessageBodyMapper.INSTANCE.vo2CustomResponse(vo);
      return JsonObject.success(response);
   }

   /**
    * findByPage request
    */
   @PostMapping("findByPage")
   public JsonObject<PageResult<ImMessageBodyResponse>> findByPage(
         @RequestBody PageRequestWrapper<ImMessageBodyQueryRequest> request) {
      PageRequestWrapper<ImMessageBodyQuery> wrapper = new PageRequestWrapper<>();
      wrapper.setBean(ImMessageBodyMapper.INSTANCE.request2Query(request.getBean()));
      wrapper.setSorts(request.getSorts());
          wrapper.setPageSize(request.getPageSize());
          wrapper.setPage(request.getPage());
      Page<ImMessageBodyVO> page = imMessageBodyService.findByPage(wrapper);
      return JsonObject.success(
              PageResult.of(
                  page.getContent().stream()
                      .map(vo -> ImMessageBodyMapper.INSTANCE.vo2CustomResponse(vo))
                      .collect(Collectors.toList()),
                  page.getTotalElements(),
                  page.getSize(),
                  page.getNumber())
          );
   }
}
